[;]
[; Parser]
[;]
[define [nextc] [set c [getch]]]
[nextc]
[define
    [getnext]
    [locals result elem quote]
    [set result [array]]
    [while [string_contains ' \n\r\t' c] [nextc]]
    [cond
        [[eq? c '[']
            [nextc]
            [set elem [getnext]]
            [while [not [eq? elem false]] [array_push result elem] [set elem [getnext]]]
            [return result]]
        [[eq? c ']'] [nextc] [return false]]
        [[eq? c '\'']
            [nextc]
            [while
                [not [eq? c '\'']]
                [cond
                    [[eq? c '\\']
                        [nextc]
                        [cond [[eq? c 'n'] [set c '\n']] [[eq? c 'r'] [set c '\r']] [[eq? c 't'] [set c '\t']]]]]
                [array_push result c]
                [nextc]]
            [nextc]
            [return [array 'str' [array_join result '']]]]
        [[string_contains '0123456789' c]
            [while [string_contains '0123456789' c] [array_push result c] [nextc]]
            [return [array 'num' [array_join result '']]]]
        [else
            [while [not [string_contains ' \n\r\t[]' c]] [array_push result c] [nextc]]
            [return [array_join result '']]]]]
[;]
[; Compiler]
[;]
[define [infix name expr] [return [strjoin '(' [compile [get expr 1]] name [compile [get expr 2]] ')']]]
[define [tailblock expr n] [return [strjoin '{' [array_join [map compile [tail expr n]] ';'] '}']]]
[define [tableentry expr] [return [strjoin [compile [get expr 0]] ':' [compile [get expr 1]]]]]
[define [compileif expr] 
    [locals condition]
    [cond 
        [[eq? [get expr 0] 'else'] [set condition '']]
        [else [set condition [strjoin 'if(' [compile [get expr 0]] ')']]]]
    [return [strjoin condition [tailblock expr 1]]]]
[define
    [compile expr]
    [locals type]
    [set type [get expr 0]]
    [cond
        [[eq? [typeof expr] 'string'] [return expr]]
        [[eq? type 'define']
            [return
                [strjoin
                    'function '
                    [get [get expr 1] 0]
                    '('
                    [array_join [tail [get expr 1]] ',']
                    ')'
                    [tailblock expr 2]]]]
        [[eq? type 'locals'] [return [strjoin 'var ' [array_join [tail expr] ',']]]]
        [[eq? type 'set'] [return [infix '=' expr]]]
        [[eq? type 'num'] [return [get expr 1]]]
        [[eq? type 'str'] [return [uneval [get expr 1]]]]
        [[eq? type 'table'] [return [strjoin '{' [array_join [map tableentry [tail expr]] ','] '}']]]
        [[eq? type ';'] [return '']]
        [[eq? type 'get'] [return [strjoin [compile [get expr 1]] '[' [compile [get expr 2]] ']']]]
        [[eq? type 'not'] [return [strjoin '!(' [compile [get expr 1]] ')']]]
        [[eq? type 'eq?'] [return [infix '===' expr]]]
        [[eq? type '<'] [return [infix '<' expr]]]
        [[eq? type '+'] [return [infix '+' expr]]]
        [[eq? type 'or'] [return [infix '||' expr]]]
        [[eq? type 'and'] [return [infix '&&' expr]]]
        [[eq? type 'cond'] [return [array_join [map compileif [tail expr]] 'else ']]]
        [[eq? type 'while'] [return [strjoin 'while(' [compile [get expr 1]] ')' [tailblock expr 2]]]]
        [else [return [strjoin type '(' [map compile [tail expr]] ')']]]]]
[;]
[; Pretty printer]
[;]
[define [prettyprint list acc indent]
    [locals str i escape seppos first]
    [cond
        [[not acc]
            [set acc [array]]
            [prettyprint list acc 2]
            [return [array_join acc '']]]
        [[eq? [get list 0] 'num']
            [array_push acc [get list 1]]
            [return 1]]
        [[eq? [get list 0] 'str']
            [set escape [table ['\n' '\\n'] ['\'' '\\\''] ['\t' '\\t'] [ '\\' '\\\\'] ['\r' '\\r']]]
            [set str [get list 1]]
            [array_push acc '\'']
            [set i 0]
            [while [< i [len str]]
                [array_push acc [or [get escape [get str i]] [get str i]]]
                [set i [+ i 1]]]
            [array_push acc '\'']
            [return [len str]]]
        [[eq? [typeof list] 'string']
            [array_push acc list]
            [return [len list]]]]
    [array_push acc '[']
    [set length 1]
    [set seppos [array]]
    [set first true]
    [set i 0]
    [while [< i [len list]]
        [cond [[not first]
            [array_push seppos [len acc]]
            [array_push acc '']]]
        [set length [+ [+ len 1] [prettyprint [get list i] acc [+ indent 2]]]]
        [set first false]
        [set i [+ i 1]]]
    [; TODO: nspace...]
    [array_push acc ']']
    [return length]]

[;]
[; Main loop]
[;]
[define [compile_stdin]
    [print '/* Code compiled from yolan */']
    [print 'load("lisplib.js");']
    [set expr [getnext]]
    [while [not [eq? expr false]] [print [compile expr]] [set expr [getnext]]]]

[define [prettyprint_stdin] 
    [set expr [getnext]]
    [while [not [eq? expr false]] [print [prettyprint expr]] [set expr [getnext]]]]

[; compile_stdin]
[prettyprint_stdin]
