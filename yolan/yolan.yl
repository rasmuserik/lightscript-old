[;]
[; Parser]
[;]
[define [nextc] [globals c] [set c [getch]]]
[nextc]
[define
    [getnext]
    [globals c]
    [locals result elem quote]
    [set result [array]]
    [while [string_contains ' \n\r\t' c] [nextc]]
    [cond
        [[eq? c '[']
            [nextc]
            [set elem [getnext]]
            [while [not [eq? elem false]] [array_push result elem] [set elem [getnext]]]
            [return result]]
        [[eq? c ']'] [nextc] [return false]]
        [[eq? c '\'']
            [nextc]
            [while
                [not [eq? c '\'']]
                [cond
                    [[eq? c '\\']
                        [nextc]
                        [cond [[eq? c 'n'] [set c '\n']] [[eq? c 'r'] [set c '\r']] [[eq? c 't'] [set c '\t']]]]]
                [array_push result c]
                [nextc]]
            [nextc]
            [return [array 'str' [array_join result '']]]]
        [[string_contains '0123456789' c]
            [while [string_contains '0123456789' c] [array_push result c] [nextc]]
            [return [array 'num' [array_join result '']]]]
        [else
            [while [not [string_contains ' \n\r\t[]' c]] [array_push result c] [nextc]]
            [return [array_join result '']]]]]
[;]
[; JavaScript Compiler]
[;]
[set indent_count 0]
[define [increase_indent] [globals indent_count] [set indent_count [+ indent_count 1]]]
[define [decrease_indent] [globals indent_count] [set indent_count [- indent_count 1]]]
[define
    [indent]
    [globals indent_count]
    [locals i result]
    [set result '']
    [set i indent_count]
    [while [< 0 i] [set result [+ result '    ']] [set i [- i 1]]]
    [return result]]
[define [infixraw name expr] [return [strjoin [compile [get expr 1]] ' ' name ' ' [compile [get expr 2]]]]]
[define [infix name expr] [return [strjoin '(' [infixraw name expr] ')']]]
[define
    [tailblock expr n]
    [locals result]
    [increase_indent]
    [set result [strjoin ' {\n' [indent] [array_join [map compile [tail expr n]] [strjoin ';\n' [indent]]]]]
    [decrease_indent]
    [return [strjoin result '\n' [indent] '}']]]
[define [tableentry expr] [return [strjoin [compile [get expr 0]] ':' [compile [get expr 1]]]]]
[define
    [compileif expr]
    [locals condition]
    [cond
        [[eq? [get expr 0] 'else'] [set condition '']]
        [else [set condition [strjoin 'if(' [compile [get expr 0]] ')']]]]
    [return [strjoin condition [tailblock expr 1]]]]
[define
    [compile expr]
    [locals expr_head]
    [set expr_head [get expr 0]]
    [cond
        [[eq? [get_type expr] 'string'] [return expr]]
        [[eq? expr_head 'define']
            [return
                [strjoin
                    'function '
                    [get [get expr 1] 0]
                    '('
                    [array_join [tail [get expr 1]] ', ']
                    ')'
                    [tailblock expr 2]]]]
        [[eq? expr_head 'locals'] [return [strjoin 'var ' [array_join [tail expr] ', ']]]]
        [[eq? expr_head 'globals'] [return [strjoin '// global vars: ' [array_join [tail expr] ', ']]]]
        [[eq? expr_head 'set'] [return [infixraw '=' expr]]]
        [[eq? expr_head 'num'] [return [get expr 1]]]
        [[eq? expr_head 'str'] [return [uneval [get expr 1]]]]
        [[eq? expr_head 'table'] [return [strjoin '{' [array_join [map tableentry [tail expr]] ', '] '}']]]
        [[eq? expr_head ';'] [return [strjoin '// ' [array_join [tail expr] ' ']]]]
        [[eq? expr_head 'get'] [return [strjoin [compile [get expr 1]] '[' [compile [get expr 2]] ']']]]
        [[eq? expr_head 'not'] [return [strjoin '!(' [compile [get expr 1]] ')']]]
        [[eq? expr_head 'eq?'] [return [infix '===' expr]]]
        [[eq? expr_head '<'] [return [infix '<' expr]]]
        [[eq? expr_head '+'] [return [infix '+' expr]]]
        [[eq? expr_head '-'] [return [infix '-' expr]]]
        [[eq? expr_head 'or'] [return [infix '||' expr]]]
        [[eq? expr_head 'and'] [return [infix '&&' expr]]]
        [[eq? expr_head 'cond'] [return [array_join [map compileif [tail expr]] ' else ']]]
        [[eq? expr_head 'while'] [return [strjoin 'while(' [compile [get expr 1]] ')' [tailblock expr 2]]]]
        [else [return [strjoin expr_head '(' [array_join [map compile [tail expr]] ', '] ')']]]]]
[;]
[; Python Compiler]
[;]
[define
    [py_infixraw name expr]
    [return [strjoin [py_compile [get expr 1]] ' ' name ' ' [py_compile [get expr 2]]]]]
[define [py_infix name expr] [return [strjoin '(' [py_infixraw name expr] ')']]]
[define
    [py_tailblock expr n]
    [locals result]
    [increase_indent]
    [set result [strjoin '\n' [indent] [array_join [map py_compile [tail expr n]] [strjoin '\n' [indent]]]]]
    [decrease_indent]
    [return [strjoin result '\n' [indent]]]]
[define [py_tableentry expr] [return [strjoin [py_compile [get expr 0]] ':' [py_compile [get expr 1]]]]]
[define
    [py_compileif expr]
    [locals condition]
    [cond
        [[eq? [get expr 0] 'else'] [set condition 'se:']]
        [else [set condition [strjoin 'if ' [py_compile [get expr 0]] ':']]]]
    [return [strjoin condition [py_tailblock expr 1]]]]
[define
    [py_compile expr]
    [locals expr_head]
    [set expr_head [get expr 0]]
    [cond
        [[eq? [get_type expr] 'string'] [return expr]]
        [[eq? expr_head 'define']
            [return
                [strjoin
                    'def '
                    [get [get expr 1] 0]
                    '('
                    [array_join [tail [get expr 1]] ', ']
                    '):'
                    [py_tailblock expr 2]]]]
        [[eq? expr_head 'locals'] [return [strjoin '# local vars: ' [array_join [tail expr] ', ']]]]
        [[eq? expr_head 'globals'] [return [strjoin 'global ' [array_join [tail expr] ', ']]]]
        [[eq? expr_head 'set'] [return [py_infixraw '=' expr]]]
        [[eq? expr_head 'num'] [return [get expr 1]]]
        [[eq? expr_head 'str'] [return [uneval [get expr 1]]]]
        [[eq? expr_head 'table'] [return [strjoin '{' [array_join [map py_tableentry [tail expr]] ', '] '}']]]
        [[eq? expr_head ';'] [return [strjoin '# ' [array_join [tail expr] ' ']]]]
        [[eq? expr_head 'get'] [return [strjoin [py_compile [get expr 1]] '[' [py_compile [get expr 2]] ']']]]
        [[eq? expr_head 'not'] [return [strjoin 'not (' [py_compile [get expr 1]] ')']]]
        [[eq? expr_head 'eq?'] [return [py_infix '==' expr]]]
        [[eq? expr_head '<'] [return [py_infix '<' expr]]]
        [[eq? expr_head '+'] [return [py_infix '+' expr]]]
        [[eq? expr_head '-'] [return [py_infix '-' expr]]]
        [[eq? expr_head 'or'] [return [py_infix 'or' expr]]]
        [[eq? expr_head 'and'] [return [py_infix 'and' expr]]]
        [[eq? expr_head 'cond'] [return [array_join [map py_compileif [tail expr]] 'el']]]
        [[eq? expr_head 'while']
            [return [strjoin 'while ' [py_compile [get expr 1]] ':' [py_tailblock expr 2]]]]
        [else [return [strjoin expr_head '(' [array_join [map py_compile [tail expr]] ', '] ')']]]]]
[;]
[; Pretty printer]
[;]
[define
    [nspace n]
    [locals result]
    [set result '']
    [while [< 0 n] [set result [+ result ' ']] [set n [- n 1]]]
    [return result]]
[define
    [prettyprint list acc indent]
    [locals str i escape seppos first sep length]
    [cond
        [[not acc] [set acc [array]] [prettyprint list acc 4] [return [array_join acc '']]]
        [[eq? [get list 0] 'num'] [array_push acc [get list 1]] [return 1]]
        [[eq? [get list 0] 'str']
            [set escape [table ['\n' '\\n'] ['\'' '\\\''] ['\t' '\\t'] ['\\' '\\\\'] ['\r' '\\r']]]
            [set str [get list 1]]
            [array_push acc '\'']
            [set i 0]
            [while
                [< i [len str]]
                [array_push acc [or [get escape [get str i]] [get str i]]]
                [set i [+ i 1]]]
            [array_push acc '\'']
            [return [len str]]]
        [[eq? [get_type list] 'string'] [array_push acc list] [return [len list]]]]
    [array_push acc '[']
    [set length 1]
    [set seppos [array]]
    [set first true]
    [set i 0]
    [while
        [< i [len list]]
        [cond [[not first] [array_push seppos [len acc]] [array_push acc '']]]
        [set length [+ [+ length 1] [prettyprint [get list i] acc [+ indent 4]]]]
        [set first false]
        [set i [+ i 1]]]
    [cond [[< [- 110 indent] length] [set sep [strjoin '\n' [nspace indent]]]] [else [set sep ' ']]]
    [set i 0]
    [while [< i [len seppos]] [put acc [get seppos i] sep] [set i [+ i 1]]]
    [array_push acc ']']
    [return length]]
